
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module image(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [3:0] ship_pose ;
wire [10:0] enemy0_out;
wire [10:0] enemy1_out;
wire [10:0] enemy2_out;
wire [10:0] enemy3_out;
wire [10:0] enemy4_out;
wire [10:0] enemy5_out;
wire [10:0] enemy6_out;
wire [10:0] enemy7_out;
wire [4:0] score;  
wire shoot_mode;
wire game_over;
wire [7:0] colour;

assign VGA_R[7:5] = colour[2:0];
assign VGA_G[7:5] = colour[5:3];
assign VGA_B[7:6] = colour[7:6];
assign VGA_BLANK_N = 1'b1;
assign VGA_SYNC_N = 1'b0;

MainActivity qwert(
	  .CLK(CLOCK_50),
	  .HS(VGA_HS),
	  .VS(VGA_VS),
	  .COLOUR_OUT(colour),
	  .clk25MHz(VGA_CLK),  
	  .ship_pose(ship_pose),
     .enemy0_out(enemy0_out),
     .enemy1_out(enemy1_out),
     .enemy2_out(enemy2_out),
     .enemy3_out(enemy3_out),
     .enemy4_out(enemy4_out),
     .enemy5_out(enemy5_out),
     .enemy6_out(enemy6_out),
     .enemy7_out(enemy7_out),
	  .score(score),   
	  .shoot_mode(shoot_mode),
	  .game_over(game_over)
);

game_engine(
	  .clk(CLOCK_50),               
     .reset(KEY[3]),
	  .button_shoot(KEY[2]),
	  .button_cw(KEY[1]),
	  .button_ccw(KEY[0]),
	  .switch0(SW[0]),
	  .switch1(SW[1]),
	  .ship_pose(ship_pose),
     .enemy0_out(enemy0_out),
     .enemy1_out(enemy1_out),
     .enemy2_out(enemy2_out),
     .enemy3_out(enemy3_out),
     .enemy4_out(enemy4_out),
     .enemy5_out(enemy5_out),
     .enemy6_out(enemy6_out),
     .enemy7_out(enemy7_out),
	  .score(score),   
	  .shoot_mode(shoot_mode),
	  .game_over(game_over)
);

scoreboard_display scoreboard_display_inst(
	 .clk(CLOCK_50),
    .score(score),
    .seg_tens(HEX1),
    .seg_units(HEX0)
);

endmodule

